import express from 'express';
import morgan from 'morgan';
import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import JsonDatabase from '../../shared/JsonDatabase.js';
import { autoRegister, ServiceRegistry } from '../../shared/serviceRegistry.js';

const app = express();
const PORT = process.env.PORT || 3003;
const JWT_KEY = process.env.JWT_SECRET || 'dev-secret';
const shoppingDB = new JsonDatabase(path.join(process.cwd(), 'data', 'collections.json'));

app.use(express.json());
app.use(morgan('dev'));

// Middleware de autenticação
function authenticate(req,res,next){
  const authHeader = req.headers.authorization || '';
  const token = authHeader.startsWith('Bearer ') ? authHeader.slice(7) : null;
  if(!token) return res.status(401).json({ error:'Token ausente' });
  try { req.user = jwt.verify(token, JWT_KEY); next(); } catch { return res.status(401).json({ error:'Token inválido' }); }
}

// Health check
app.get('/health', (req,res)=> res.json({ status:'ok', service:'collection-service' }));

// Helpers
function computeSummary(collection){
  const totalItems = collection.items.length;
  const purchasedItems = collection.items.filter(i => i.purchased).length;
  const estimatedTotal = collection.items.reduce((acc, i) => acc + Number(i.estimatedPrice||0) * Number(i.quantity||1), 0);
  collection.summary = { totalItems, purchasedItems, estimatedTotal: Number(estimatedTotal.toFixed(2)) };
  return collection.summary;
}

async function fetchProduct(productId){
  const registry = new ServiceRegistry();
  const svc = registry.discover('product-service');
  if (!svc) throw new Error('Product Service indisponível');
  const baseUrl = `http://${svc.host}:${svc.port}`;
  const resp = await fetch(`${baseUrl}/products/${productId}`);
  if (!resp.ok) throw new Error('Produto não encontrado');
  const { product } = await resp.json();
  return product;
}

// Endpoints
app.post('/collections', authenticate, (req,res)=>{
  const { name, description } = req.body;
  if(!name) return res.status(400).json({ error:'name é obrigatório' });
  const now = Date.now();
  const collection = {
    id: uuidv4(),
    userId: req.user.id,
    name,
    description: description || '',
    status: 'active',
    items: [],
    summary: { totalItems:0, purchasedItems:0, estimatedTotal:0 },
    createdAt: now,
    updatedAt: now
  };
  shoppingDB.upsert(collection);
  res.status(201).json({ collection });
});

app.get('/collections', authenticate, (req,res)=>{
  const userCollections = shoppingDB.read().filter(c => c.userId === req.user.id);
  res.json({ collections: userCollections });
});

app.get('/collections/:id', authenticate, (req,res)=>{
  const collection = shoppingDB.findById(req.params.id);
  if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
  computeSummary(collection);
  res.json({ collection });
});

app.put('/collections/:id', authenticate, (req,res)=>{
  const collection = shoppingDB.findById(req.params.id);
  if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
  const { name, description, status } = req.body;
  if (name) collection.name = name;
  if (description != null) collection.description = description;
  if (status) collection.status = status;
  collection.updatedAt = Date.now();
  computeSummary(collection);
  shoppingDB.upsert(collection);
  res.json({ collection });
});

app.delete('/collections/:id', authenticate, (req,res)=>{
  const collection = shoppingDB.findById(req.params.id);
  if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
  shoppingDB.removeById(collection.id);
  res.json({ success:true });
});

app.post('/collections/:id/items', authenticate, async (req,res)=>{
  try{
    const collection = shoppingDB.findById(req.params.id);
    if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
    const { productId, quantity=1, estimatedPrice, notes='' } = req.body;
    if(!productId) return res.status(400).json({ error:'productId é obrigatório' });
    const product = await fetchProduct(productId);
    const entry = {
      productId,
      productName: product.name,
      quantity: Number(quantity),
      unit: product.unit,
      estimatedPrice: Number(estimatedPrice ?? product.averagePrice ?? 0),
      purchased: false,
      notes,
      addedAt: Date.now()
    };
    collection.items.push(entry);
    collection.updatedAt = Date.now();
    computeSummary(collection);
    shoppingDB.upsert(collection);
    res.status(201).json({ collection });
  } catch(e){ res.status(400).json({ error: e.message }); }
});

app.put('/collections/:id/items/:productId', authenticate, (req,res)=>{
  const collection = shoppingDB.findById(req.params.id);
  if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
  const idx = collection.items.findIndex(i => i.productId === req.params.productId);
  if(idx < 0) return res.status(404).json({ error:'Produto não está na coleção' });
  const changes = req.body;
  collection.items[idx] = {
    ...collection.items[idx],
    ...changes,
    quantity: changes.quantity != null ? Number(changes.quantity) : collection.items[idx].quantity,
    estimatedPrice: changes.estimatedPrice != null ? Number(changes.estimatedPrice) : collection.items[idx].estimatedPrice
  };
  collection.updatedAt = Date.now();
  computeSummary(collection);
  shoppingDB.upsert(collection);
  res.json({ collection });
});

app.delete('/collections/:id/items/:productId', authenticate, (req,res)=>{
  const collection = shoppingDB.findById(req.params.id);
  if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
  collection.items = collection.items.filter(i => i.productId !== req.params.productId);
  collection.updatedAt = Date.now();
  computeSummary(collection);
  shoppingDB.upsert(collection);
  res.json({ collection });
});

app.get('/collections/:id/summary', authenticate, (req,res)=>{
  const collection = shoppingDB.findById(req.params.id);
  if(!collection || collection.userId !== req.user.id) return res.status(404).json({ error:'Coleção não encontrada' });
  res.json({ summary: computeSummary(collection) });
});

app.listen(PORT, ()=>{
  autoRegister({ name:'collection-service', port: PORT });
  console.log(`✅ Collection Service rodando na porta ${PORT}`);
});

